import * as vscode from 'vscode';
import * as path from 'path';
import * as fs from 'fs/promises';

export interface EnvFile {
    path: string;
    variables: Map<string, string>;
}

export class EnvFileManager {
    private workspaceRoot: string;

    constructor(workspaceRoot: string) {
        this.workspaceRoot = workspaceRoot;
    }

    /**
     * Parse .env file content into a Map
     * @param content File content
     * @returns Map of environment variables
     */
    private parseEnvContent(content: string): Map<string, string> {
        const envVars = new Map<string, string>();
        const lines = content.split('\n');

        for (const line of lines) {
            const trimmed = line.trim();

            // Skip empty lines and comments
            if (!trimmed || trimmed.startsWith('#')) {
                continue;
            }

            // Parse KEY=VALUE format
            const match = trimmed.match(/^([A-Z_][A-Z0-9_]*)\s*=\s*(.*)$/);
            if (match) {
                const [, key, value] = match;
                envVars.set(key, value);
            }
        }

        return envVars;
    }

    /**
     * Read .env file
     * @param filePath Relative path to .env file
     * @returns EnvFile object or null if file doesn't exist
     */
    async readEnvFile(filePath: string): Promise<EnvFile | null> {
        const fullPath = path.join(this.workspaceRoot, filePath);

        try {
            const content = await fs.readFile(fullPath, 'utf-8');
            return {
                path: fullPath,
                variables: this.parseEnvContent(content)
            };
        } catch (error) {
            // File doesn't exist
            if ((error as NodeJS.ErrnoException).code === 'ENOENT') {
                return null;
            }
            throw error;
        }
    }

    /**
     * Write environment variables to a file
     * @param filePath Relative path to file
     * @param variables Map of environment variables
     * @param addComments Whether to add helpful comments
     * @param varLocations Optional map of variable names to file paths where they're used
     */
    private async writeEnvFile(
        filePath: string,
        variables: Map<string, string>,
        addComments: boolean = false,
        varLocations?: Map<string, string[]>
    ): Promise<void> {
        const fullPath = path.join(this.workspaceRoot, filePath);
        const sortedKeys = Array.from(variables.keys()).sort();

        let content = '';

        if (addComments) {
            content += '# Environment Variables\n';
            content += '# Auto-generated by Env Watcher extension\n\n';
        }

        for (const key of sortedKeys) {
            const value = variables.get(key) || '';

            // Add file path comments if locations are provided
            if (varLocations && varLocations.has(key)) {
                const files = varLocations.get(key)!;
                if (files.length > 0) {
                    content += `# Used in: ${files.join(', ')}\n`;
                }
            }

            content += `${key}=${value}\n`;

            // Add blank line between variables for readability when including file paths
            if (varLocations && varLocations.has(key)) {
                content += '\n';
            }
        }

        // Ensure directory exists
        const dir = path.dirname(fullPath);
        await fs.mkdir(dir, { recursive: true });

        await fs.writeFile(fullPath, content, 'utf-8');
    }

    /**
     * Update .env file with new variables (without overriding existing values)
     * @param envFilePath Path to .env file
     * @param discoveredVars Set of discovered environment variable names
     * @param varLocations Optional map of variable names to file paths where they're used
     * @returns Number of new variables added
     */
    async updateEnvFile(
        envFilePath: string,
        discoveredVars: Set<string>,
        varLocations?: Map<string, string[]>
    ): Promise<number> {
        const existingEnv = await this.readEnvFile(envFilePath);
        const envVars = existingEnv?.variables || new Map<string, string>();

        let newCount = 0;

        // Add only new variables (don't override existing ones)
        for (const varName of discoveredVars) {
            if (!envVars.has(varName)) {
                envVars.set(varName, '');
                newCount++;
            }
        }

        if (newCount > 0 || !existingEnv) {
            await this.writeEnvFile(envFilePath, envVars, false, varLocations);
        }

        return newCount;
    }

    /**
     * Update .env.example file with all discovered variables (with placeholder values)
     * @param exampleFilePath Path to .env.example file
     * @param discoveredVars Set of discovered environment variable names
     * @param placeholder Placeholder value for variables
     * @param varLocations Optional map of variable names to file paths where they're used
     * @returns Number of variables written
     */
    async updateExampleFile(
        exampleFilePath: string,
        discoveredVars: Set<string>,
        placeholder: string = '',
        varLocations?: Map<string, string[]>
    ): Promise<number> {
        const envVars = new Map<string, string>();

        for (const varName of discoveredVars) {
            envVars.set(varName, placeholder);
        }

        if (envVars.size > 0) {
            await this.writeEnvFile(exampleFilePath, envVars, true, varLocations);
        }

        return envVars.size;
    }

    /**
     * Update both .env and .env.example files
     * @param envFilePath Path to .env file
     * @param exampleFilePath Path to .env.example file
     * @param discoveredVars Set of discovered environment variable names
     * @param placeholder Placeholder value for .env.example
     * @param varLocations Optional map of variable names to file paths where they're used
     * @returns Object with counts of updated variables
     */
    async updateBothFiles(
        envFilePath: string,
        exampleFilePath: string,
        discoveredVars: Set<string>,
        placeholder: string = '',
        varLocations?: Map<string, string[]>
    ): Promise<{ envAdded: number; exampleTotal: number }> {
        const [envAdded, exampleTotal] = await Promise.all([
            this.updateEnvFile(envFilePath, discoveredVars, varLocations),
            this.updateExampleFile(exampleFilePath, discoveredVars, placeholder, varLocations)
        ]);

        return { envAdded, exampleTotal };
    }
}
